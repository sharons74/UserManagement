AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A simple serverless user management application

Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AkaUsers
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  BatchOperationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AkaBatchOperations
      AttributeDefinitions:
        - AttributeName: BatchId
          AttributeType: S
      KeySchema:
        - AttributeName: BatchId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UserQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: AkaUserQueue

  BatchUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: aka-batch-upload

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create_user.lambda_handler
      Runtime: python3.9
      CodeUri: ./services
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /users
            Method: POST
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref UsersTable

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_user.lambda_handler
      Runtime: python3.9
      CodeUri: ./services
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: GET
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref UsersTable

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_user.lambda_handler
      Runtime: python3.9
      CodeUri: ./services
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: PUT
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref UsersTable

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete_user.lambda_handler
      Runtime: python3.9
      CodeUri: ./services
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: DELETE
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref UsersTable

  BulkOperationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bulk_operations.lambda_handler
      Runtime: python3.9
      CodeUri: ./services
      Environment:
        Variables:
          DYNAMODB_BATCH_TABLE: !Ref BatchOperationsTable
          SQS_QUEUE_URL: !GetAtt UserQueue.Arn
      Events:
        S3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref BatchUploadBucket
            Events: s3:ObjectCreated:*

  ProcessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessUserFunction
      CodeUri: ./services
      Handler: process_user.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          QueueUrl: !Ref UserQueue
          TableName: !Ref UsersTable
      Events:
        ProcessUserEvent:
          Type: SQS
          Properties:
            Queue: !Ref UserQueue

  UploadToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadToS3Function
      CodeUri: ./services
      Handler: upload_to_s3.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          BucketName: !Ref BatchUploadBucket
      Events:
        UploadToS3Api:
          Type: Api
          Properties:
            Path: /users/upload
            Method: post

Outputs:
  UserAPI:
    Description: URL of the API endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}"
